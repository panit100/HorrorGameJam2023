///////////////////////////////
// Better Lit Shader
// Â© Jason Booth, 2021
///////////////////////////////

// Basic Lit shader

// This is the base of the shader itself, the main texture layer. Some things to note if you are extending this:
// The normal may be in tangent space, world space, or not generated at all, depending on the normal mode.
// If you need the normal in world space, there is a utility function to get this in the FunctionLibrary.surfshader
//
// All sampling is handle via macro re-routing. This lets us share a library of functions for sampling with
// combinations of triplanar and stochastic, without having the #ifdef's directly in that library. Each texture layer
// has it's own shader features, and based on them defines the sampling function to use in the library, and undef's
// them as well.
//
// A config structure holds a lot of information about how things should be sampled, for both triplanar and stochastic
// effects. 


BEGIN_OPTIONS
   ShaderName "Hidden/Better Lit/Dev/Lit Base"
   CustomEditor "JBooth.BetterShaders.BetterShaderMaterialGUI"
   SubEditor "LitBaseSubMaterialEditor"
   ExtraV2F0Require "_TRIPLANARBARYBLEND || _DETAILTRIPLANARBARYBLEND"
   ScreenPosRequire "_SPARKLES"
END_OPTIONS

BEGIN_SUBSHADERS
   "FunctionLibrary.surfshader"
END_SUBSHADERS

BEGIN_PROPERTIES
    [HideInInspector]_MainTex("Unity Standard Shader Hack Property", 2D) = "white" {} // use this to do material conversion.
    [HideInInspector]_BaseColor("Unity HDRP/URP Shader Hack Property", Color) = (1,1,1,1)// use this to do material conversion.
    [HideInInspector]_BumpMap("Unity Standard Shader Hack Property", 2D) = "bump" {} // use this to do material conversion.
    [HideInInspector]_IsConverted("Have we done one time conversion yet?", Float) = 0
    
    _TriplanarSpace ("Triplanar Space", Float) = 0
    _TriplanarContrast ("Triplanar Contrast", Range(1, 10)) = 4
    _TriplanarBaryBlend("Triplanar Bary Blend", Range(0, 1)) = 0.9
    _UVSource("UV Source", Float) = 0
    [MainTex]_AlbedoMap("Albedo/Height", 2D) = "white" {}
    _AlbedoMap_P1("Albedo/Height", 2D) = "white" {}
    _AlbedoMap_P2("Albedo/Height", 2D) = "white" {}
    [MainColor]_Tint ("Tint", Color) = (1, 1, 1, 1)
    _AlbedoBrightness("Brightness", Range(-1, 1)) = 0
    _AlbedoContrast("Contrast", Range(0,2)) = 1
    _AlbedoHue("Hue", Range(-1,1)) = 0
    _AlbedoSaturation("Saturation", Range(0,2)) = 1
    _AlphaThreshold("Alpha Threshold", Range(0,1)) = 0.0
    _Cutoff("Unity Lightmapper sucks", Range(0, 1)) = 0.0
    _NormalMap("Normal", 2D) = "bump" {}
    _NormalMap_P1("Normal", 2D) = "bump" {}
    _NormalMap_P2("Normal", 2D) = "bump" {}
    _NormalStrength("Normal Strength", Range(0,2)) = 1
    
    _MaskMap("Mask Map", 2D) = "black" {}
    _MaskMap_P1("Mask Map", 2D) = "black" {}
    _MaskMap_P2("Mask Map", 2D) = "black" {}
    _Smoothness("Smoothness", Range(0,1)) = 0
    _Metallic("Metallic", Range(0,1)) = 0
    _SpecularMap("Specular Map", 2D) = "black" {}
    _SpecularMap_P1("Specular Map", 2D) = "black" {}
    _SpecularMap_P2("Specular Map", 2D) = "black" {}

    _SpecularTint("Specular Tint", Color) = (1,1,1,1)

    _EmissionMap("Emission Map", 2D) = "white" {}
    _EmissionMap_P1("Emission Map", 2D) = "white" {}
    _EmissionMap_P2("Emission Map", 2D) = "white" {}
    _EmissionColor("Emission Strength", Color) = (0,0,0,0)
    _EmissionMultiplier("Emission Multiplier", Float) = 1

    _CheapSSSTexture("SSS Map", 2D) = "black" {}
    _CheapSSSTexture_P1("SSS Map", 2D) = "black" {}
    _CheapSSSTexture_P2("Emission Map", 2D) = "black" {}

    _ClearCoatMap("Clear Coat Map", 2D) = "white" {}
    _ClearCoatMap_P1("Clear Coat Map", 2D) = "white" {}
    _ClearCoatMap_P2("Clear Coat Map", 2D) = "white" {}
    _ClearCoatMask("Clear Coat Mask", Range(0.0, 1.0)) = 0.0
    _ClearCoatSmoothness("Clear Coat Smoothness", Range(0.0, 1.0)) = 1.0

    _SmoothnessRemap("Smoothness Remap", Vector) = (0, 1, 0, 0)
    _AORemap("AO Remap", Vector) = (0, 1, 0, 0)
    _MetallicRemap("Metallic Remap", Vector) = (0, 1, 0, 0)
    _HeightRemap("Height Remap", Vector) = (0, 1, 0, 0)

    _DetailUVSource("Detail UV Source", Float) = 0
    _DetailMap("Detail Map", 2D) = "white" {}
    _DetailMap_P1("Detail Map", 2D) = "white" {}
    _DetailMap_P2("Detail Map", 2D) = "white" {}
    _DetailAlbedoStrength("Detail Albedo Strength", Range(0, 2)) = 1
    _DetailNormalStrength("Detail Normal Strength", Range(0, 2)) = 1
    _DetailSmoothnessStrength("Detail Smoothness Strength", Range(0, 2)) = 1
    _DetailTriplanarSpace ("Triplanar Space", Float) = 0
    _DetailTriplanarContrast ("Triplanar Contrast", Range(1, 10)) = 4
    _DetailTriplanarBaryBlend("Triplanar Bary Blend", Range(0, 1)) = 0.9
    _DetailStochasticContrast("Stochastic Contrast", Range(0.01,0.999)) = 0.7
    _DetailStochasticScale("Stochastic Contrast", Range(0.2,1.5)) = 0.5
    _FlatShadingBlend("Flat Shading Blend", Range(0,4)) = 1
    _StochasticContrast("Stochastic Contrast", Range(0.01,0.999)) = 0.7
    _StochasticScale("Stochastic Contrast", Range(0.2,1.5)) = 0.5
    _ParallaxHeight("Parallax Height", Range(0, 0.25)) = 0

    _MicroShadowStrength("Micro Shadow Strength", Range(0, 2)) = 0

    _FuzzyShadingColor("Fuzzy Shading Color", Color) = (1,1,1,1)
    _FuzzyShadingParams("Fuzzy Shading Params", Vector) = (0.3,1,1.5,1) // coreMult, edgeMult, power

    _POMMaxSamples ("POM Max Samples", Range(4, 32)) = 8
    _POMMin ("POM Min Distance", Float) = 25
    _POMFade ("Pom Fade Range", Float) = 25

    _FresnelColor("Fresnel Color", Color) = (0,0,0,0)
    _FresnelBSP("Fresnel Bias Scale Power", Vector) = (0,9,3,0)

    _SparkleNoise("Sparkle Noise", 2D) = "black" {}
    _SparkleTCI("Sparkle Tiling/Cutoff/Intensity/Emission", Vector) = (1, 0.7, 1, 0)

    _TextureRotation("Rotation", Vector) = (0,0,0,0)
    _DetailTextureRotation("Rotation", Vector) = (0,0,0,0)

    _CheapSSSTint("Tint", Color) = (1,1,1,1)
    _CheapSSSThickness("Thickness", Float) = 0
    _CheapSSSDistortion("Distortion", Float) = 1
    _CheapSSSPower("Power", Float) = 2
    _CheapSSSScale("Scale", Float) = 1

END_PROPERTIES


BEGIN_DEFINES
   #pragma shader_feature_local _ _PACKEDFAST _PACKEDFASTMETAL
   #pragma shader_feature_local _ _TRIPLANAR _TRIPLANARPROJECTION
   #pragma shader_feature_local _ _TRIPLANARBARYBLEND _TRIPLANARFLATBLEND
   #pragma shader_feature_local _ _NORMALMAP 
   #pragma shader_feature_local _ _MASKMAP
   #pragma shader_feature_local _ _DETAIL
   #pragma shader_feature_local _ _DETAILTRIPLANAR _DETAILTRIPLANARPROJECTION
   #pragma shader_feature_local _ _DETAILTRIPLANARBARYBLEND _DETAILTRIPLANARFLATBLEND
   #pragma shader_feature_local _ _DETAILSTOCHASTIC
   #pragma shader_feature_local _ _EMISSION
   #pragma shader_feature_local _ _FLATSHADE
   #pragma shader_feature_local _ _STOCHASTIC
   #pragma shader_feature_local _ _PARALLAX _POM
   #pragma shader_feature_local _ _SPECULAR
   #pragma shader_feature_local _ _NOISEWORLD _NOISELOCAL
   #pragma shader_feature_local _ _NOISEHQ _NOISETEXTURE _NOISEWORLEY
   #pragma shader_feature_local _ _MICROSHADOW
   #pragma shader_feature_local _ _FUZZYSHADING 
   #pragma shader_feature_local _ _ALPHACUT
   #pragma shader_feature_local _ _USEBRIGHTNESSCONTRAST
   #pragma shader_feature_local _ _USEHSVSHIFT
   #pragma shader_feature_local _ _FRESNEL _FRESNELNORMAL
   #pragma shader_feature_local _ _SPARKLES
   #pragma shader_feature_local _ _TEXTUREROTATION
   #pragma shader_feature_local _ _DETAILTEXTUREROTATION

   #pragma shader_feature_local _ _CHEAPSSS
   #pragma shader_feature_local _ _CHEAPSSSTEXTURE

   // only for URP/Standard Forward
   #pragma shader_feature_local _ _SIMPLELIT _BAKEDLIT

   // for URP/HDRP only
   #pragma shader_feature_local _ _CLEARCOAT
   #pragma shader_feature_local _ _CLEARCOATMAP

    #define BETTERLITBASE 1

END_DEFINES

BEGIN_CBUFFER  
   half4 _Tint;
   half _UVSource;
   half _TriplanarContrast;
   half _TriplanarBaryBlend;
   half _AlbedoContrast;
   half _AlbedoBrightness;
   half _AlbedoHue;
   half _AlbedoSaturation;
   float4 _AlbedoMap_ST;

   float4 _AlbedoMap_P1_ST;
   float4 _AlbedoMap_P2_ST;
   float4 _DetailMap_P1_ST;
   float4 _DetailMap_P2_ST;

   float4 _DetailMap_ST;
   half _NormalStrength;
   half3 _EmissionColor;
   half _EmissionMultiplier;
   float _DetailUVSource;
   half _StochasticScale;
   half _DetailStochasticScale;
   half _Smoothness;
   half _Metallic;
   half2 _SmoothnessRemap;
   half2 _AORemap;
   half2 _MetallicRemap;
   half2 _HeightRemap;
   half _DetailAlbedoStrength;
   half _DetailNormalStrength;
   half _DetailSmoothnessStrength;
   half _AlphaThreshold;
   half _Cutoff; // for Unity's light mapper
   half _TriplanarSpace;
   half _DetailTriplanarSpace;
   half _DetailTriplanarContrast;
   half _DetailTriplanarBaryBlend;
   half _MicroShadowStrength;
   half3 _FuzzyShadingColor;
   half3 _FuzzyShadingParams;
   half3 _TextureRotation;
   half3 _DetailTextureRotation;

   half3 _SpecularTint;

   int _POMMaxSamples;
   float _POMMin;
   float _POMFade;

   half _FlatShadingBlend;

   half _StochasticContrast;
   half _DetailStochasticContrast;

   half _ParallaxHeight;

   half4 _FresnelColor;
   half3 _FresnelBSP;
   half4 _SparkleTCI;

   half _ClearCoatMask;
   half _ClearCoatSmoothness;

   half3 _CheapSSSTint;
   half _CheapSSSThickness;
   half _CheapSSSDistortion;
   half _CheapSSSPower;
   half _CheapSSSScale;

END_CBUFFER

BEGIN_BLACKBOARD
    half4 cheapSSSTintThickness;
    half4 matCapMask;
END_BLACKBOARD


BEGIN_CODE

   #if defined(_SPECULAR)
      #define _USESPECULAR 1
      #define _MATERIAL_FEATURE_SPECULAR_COLOR 1
   #endif

   
   TEXTURE2D(_AlbedoMap);
   SAMPLER(sampler_AlbedoMap);
   TEXTURE2D(_NormalMap);
   SAMPLER(sampler_NormalMap);
   TEXTURE2D(_MaskMap);
   TEXTURE2D(_DetailMap);
   TEXTURE2D(_EmissionMap);
   TEXTURE2D(_SparkleNoise);
   TEXTURE2D(_ClearCoatMap);
   TEXTURE2D(_CheapSSSTexture);

   #if _SPECULAR
       TEXTURE2D(_SpecularMap);
   #endif

   #if _TRIPLANARPROJECTION
       TEXTURE2D(_AlbedoMap_P1);
       TEXTURE2D(_AlbedoMap_P2);
       TEXTURE2D(_NormalMap_P1);
       TEXTURE2D(_NormalMap_P2);
       TEXTURE2D(_MaskMap_P1);
       TEXTURE2D(_MaskMap_P2);
       TEXTURE2D(_EmissionMap_P1);
       TEXTURE2D(_EmissionMap_P2);
       TEXTURE2D(_ClearCoatMap_P1);
       TEXTURE2D(_ClearCoatMap_P2);
       #if _SPECULAR
            TEXTURE2D(_SpecularMap_P1);
            TEXTURE2D(_SpecularMap_P2);
       #endif
       TEXTURE2D(_CheapSSSTexture_P1);
       TEXTURE2D(_CheapSSSTexture_P2);
   #endif

   #if _DETAILTRIPLANARPROJECTION
       TEXTURE2D(_DetailMap_P1);
       TEXTURE2D(_DetailMap_P2);
   #endif

   void ModifyVertex(inout VertexData v, inout ExtraV2F d)
   {
      #if _TRIPLANARBARYBLEND || _DETAILTRIPLANARBARYBLEND
         d.extraV2F0.xyz = DecodePackedToFloat4(v.texcoord0.w).xyz;
      #endif
   }
   
   void SurfaceFunction(inout Surface o, inout ShaderData d)
   {
      // define samplers based on settings
      #undef SAMPLEBARY
      #undef SAMPLE
      #undef SAMPLENORMAL
      #undef TEXARGS
      #if _STOCHASTIC && _TRIPLANAR
        #define SAMPLEBARY SampleTexBaryStochasticTriplanar
        #define SAMPLE     SampleTexStochasticTriplanar
        #define SAMPLENORMAL SampleNormalStochasticTriplanar
        #define TEXARGS TEXTURE2D_ARGS
      #elif _STOCHASTIC && _TRIPLANARPROJECTION
        #define SAMPLEBARY SampleTexBaryStochasticTriplanarProjection
        #define SAMPLE     SampleTexStochasticTriplanarProjection
        #define SAMPLENORMAL SampleNormalStochasticTriplanarProjection
        #define TEXARGS TEXTURE2D_ARGS3
      #elif _STOCHASTIC
        #define SAMPLEBARY SampleTexBaryStochastic
        #define SAMPLE     SampleTexStochastic
        #define SAMPLENORMAL SampleNormalStochastic
        #define TEXARGS TEXTURE2D_ARGS
      #elif _TRIPLANAR
        #define SAMPLEBARY SampleTexBaryTriplanar
        #define SAMPLE     SampleTexTriplanar
        #define SAMPLENORMAL SampleNormalTriplanar
        #define TEXARGS TEXTURE2D_ARGS
      #elif _TRIPLANARPROJECTION
        #define SAMPLEBARY SampleTexBaryTriplanarProjection
        #define SAMPLE     SampleTexTriplanarProjection
        #define SAMPLENORMAL SampleNormalTriplanarProjection
        #define TEXARGS TEXTURE2D_ARGS3
      #else
        #define SAMPLEBARY SampleTexBary
        #define SAMPLE     SampleTex
        #define SAMPLENORMAL SampleNormal
        #define TEXARGS TEXTURE2D_ARGS
      #endif

      float4 scale0 = _AlbedoMap_ST;
      float4 scale1 = scale0;
      float4 scale2 = scale0;
      #if _TRIPLANARPROJECTION
         scale1 = _AlbedoMap_P1_ST;
         scale2 = _AlbedoMap_P2_ST;
      #endif

      #if _TRIPLANARBARYBLEND
        Config c = CreateConfig(d, scale0, scale1, scale2, _TriplanarSpace, _UVSource, _TriplanarContrast, d.extraV2F0.xyz, _TriplanarBaryBlend * 20);
      #elif _TRIPLANARFLATBLEND
        Config c = CreateConfig(d, scale0, scale1, scale2, _TriplanarSpace, _UVSource, _TriplanarContrast, half3(0.5, 0.5, 0.5), _TriplanarBaryBlend);
      #else
        Config c = CreateConfig(d, scale0, scale1, scale2, _TriplanarSpace, _UVSource, _TriplanarContrast);
      #endif

      #if _TEXTUREROTATION
        RotateConfig(c, _TextureRotation);
      #endif

      InitConfigDxDy(c);
      #if _STOCHASTIC && !_TRIPLANAR && !_TRIPLANARPROJECTION
         PrepareStochasticUVs(_StochasticScale, c.uv, c.uvT);
         InitStochasticDxDy(c.uvT, c.origUV, c.origScale);
      #elif _STOCHASTIC && (_TRIPLANAR || _TRIPLANARPROJECTION)
         PrepareStochasticUVs(_StochasticScale, c.uvT.uv0, c.uvX);
         PrepareStochasticUVs(_StochasticScale, c.uvT.uv1, c.uvY);
         PrepareStochasticUVs(_StochasticScale, c.uvT.uv2, c.uvZ);
         InitStochasticDxDy(c.uvX, c.origUV, c.origScale);
         InitStochasticDxDy(c.uvY, c.origUV, c.origScale1);
         InitStochasticDxDy(c.uvZ, c.origUV, c.origScale2);
      #endif

      #if _POM
          // would need to handle height remapping if we ever want to ship this
          float2 pomOffset = POM(TEXARGS(_AlbedoMap, sampler_AlbedoMap), c, _StochasticContrast, d);
          OffsetUV(c, pomOffset);
          d.texcoord0.xy += pomOffset;
      #endif

      // it's tempting to remove this when unused, but lots of things share this sampler,
      // and the sampler will get stripped if not sampled with the associated texture.
      // So unless unity fixes that, we always sample the albedo. On the plus side, when
      // null, it's an 8x8 texture, so not a big deal.
      half4 albedo = SAMPLEBARY(TEXARGS(_AlbedoMap, sampler_AlbedoMap), c, _StochasticContrast, d);

      #if _PARALLAX
         float2 offset = DoParallaxOffset(albedo.a, _ParallaxHeight, d.tangentSpaceViewDir);
         OffsetUV(c, offset);
         albedo = SAMPLE(TEXARGS(_AlbedoMap, sampler_AlbedoMap), c);
      #endif
      

      albedo.a = lerp(_HeightRemap.x, _HeightRemap.y, albedo.a);
      albedo.rgba *= _Tint.rgba;
      
      #if _ALPHACUT
         clip(albedo.a - _AlphaThreshold);
      #endif

      #if  _USEBRIGHTNESSCONTRAST
         albedo.rgb = AdjustContrast(albedo.rgb, _AlbedoContrast);
         albedo.rgb += _AlbedoBrightness;
      #endif

      #if _USEHSVSHIFT
         albedo.rgb = RGBtoHSV(albedo.rgb);
         albedo.r += _AlbedoHue;
         albedo.g *= _AlbedoSaturation;
         albedo.rgb = HSVtoRGB(albedo.rgb);
      #endif

      #if defined(_FLATSHADE)
        float3 dx = ddx(d.worldSpacePosition);
        float3 dy = ddy(d.worldSpacePosition);
        float3 worldNormal = normalize(cross(dy, dx));
        worldNormal = lerp(d.worldSpaceNormal, worldNormal, _FlatShadingBlend);
        d.worldSpaceNormal = worldNormal;
        d.TBNMatrix[2] = worldNormal;
      #endif



      o.Albedo = albedo.rgb;
      o.Alpha = albedo.a;

      float smoothness = _Smoothness;
      float ao = 1;
      float metallic = _Metallic;



      #if defined(_NORMALMAP) && !defined(_AUTONORMAL)
         o.Normal = SAMPLENORMAL(TEXARGS(_NormalMap, sampler_NormalMap), c, d, _NormalStrength, smoothness, ao, metallic);
         ao = lerp(_AORemap.x, _AORemap.y, ao);
         smoothness = lerp(_SmoothnessRemap.x, _SmoothnessRemap.y, smoothness);
         metallic = lerp(_MetallicRemap.x, _MetallicRemap.y, metallic);
      #endif

      half detailMask = 1;
      o.Smoothness = smoothness;
      o.Occlusion = ao;
      o.Metallic = metallic;

      
      #if defined(_MASKMAP) && !_PACKEDFAST && !_PACKEDFASTMETAL && !_PASSSCENESELECT && !_PASSMOTIONVECTOR
         // Unity mask map format (R) Metallic, (G) Occlusion, (B) Detail Mask (A) Smoothness
         half4 mask = SAMPLE(TEXARGS(_MaskMap, sampler_AlbedoMap), c);
         o.Metallic = lerp(_MetallicRemap.x, _MetallicRemap.y, mask.r);
         o.Occlusion = lerp(_AORemap.x, _AORemap.y, mask.g);
         o.Smoothness = lerp(_SmoothnessRemap.x, _SmoothnessRemap.y, mask.a);
         detailMask = mask.b;
      #endif // separate maps
       

      #if _SPECULAR && !_PASSSCENESELECT && !_PASSMOTIONVECTOR
         o.Specular = SAMPLE(TEXARGS(_SpecularMap, sampler_AlbedoMap), c).rgb * _SpecularTint.rgb;
      #endif

      half3 emission = 0;
      #if defined(_EMISSION) && !_PASSSCENESELECT && !_PASSMOTIONVECTOR
         o.Emission = SAMPLE(TEXARGS(_EmissionMap, sampler_AlbedoMap), c).rgb * _EmissionColor * _EmissionMultiplier;
      #endif

      #if _CLEARCOAT && (_HDRP || _URP) && !_PASSSCENESELECT && !_PASSMOTIONVECTOR
         o.CoatMask = _ClearCoatMask;
         o.CoatSmoothness = _ClearCoatSmoothness;
         #if _CLEARCOATMAP
            half2 coatMask = SAMPLE(TEXARGS(_ClearCoatMap, sampler_AlbedoMap), c).rg;
            o.CoatMask *= coatMask.r;
            o.CoatSmoothness *= coatMask.g;
         #endif
      #endif


      #if !_PASSSCENESELECT
          #if _CHEAPSSS
             #if _CHEAPSSSTEXTURE
                d.blackboard.cheapSSSTintThickness = SAMPLE(TEXARGS(_CheapSSSTexture, sampler_AlbedoMap), c);
             #else
                d.blackboard.cheapSSSTintThickness = half4(_CheapSSSTint.rgb, _CheapSSSThickness);
             #endif
         #endif
      #endif

      #if _FUZZYSHADING
      {
        o.Albedo *= FuzzyShade(d, albedo.a, _FuzzyShadingColor, o.Normal, _FuzzyShadingParams.x, _FuzzyShadingParams.y, _FuzzyShadingParams.z);
      }
      #endif

      #if _FRESNEL || _FRESNELNORMAL
        half3 wsn = d.worldSpaceNormal;
        #if _FRESNELNORMAL
            wsn = GetWorldSpaceNormal(d, o.Normal, albedo.a);
        #endif
        half fresnel = Fresnel(d, wsn, _FresnelBSP.x, _FresnelBSP.y, _FresnelBSP.z);
        o.Albedo = lerp(o.Albedo, _FresnelColor.rgb, fresnel);
      #endif

      #if _SPARKLES
        float sparkles = Sparkle(d, TEXTURE2D_ARGS(_SparkleNoise, shared_point_repeat_sampler), d.screenUV, d.texcoord0.xy, _SparkleTCI.x, _SparkleTCI.y, _SparkleTCI.z);
        o.Albedo = saturate(o.Albedo + sparkles);
        o.Smoothness += sparkles;
        o.Emission += sparkles * _SparkleTCI.w;
      #endif



      // HDRP style detail texturing

      #if defined(_DETAIL)
        #undef SAMPLEBARY
        #undef SAMPLE
        #undef SAMPLENORMAL
        #undef TEXARGS
        #if _DETAILSTOCHASTIC && _DETAILTRIPLANAR
          #define SAMPLEBARY SampleTexBaryStochasticTriplanar
          #define SAMPLE     SampleTexStochasticTriplanar
          #define SAMPLENORMAL SampleNormalStochasticTriplanar
          #define TEXARGS TEXTURE2D_ARGS
        #elif _DETAILSTOCHASTIC && _DETAILTRIPLANARPROJECTION
          #define SAMPLEBARY SampleTexBaryStochasticTriplanarProjection
          #define SAMPLE     SampleTexStochasticTriplanarProjection
          #define SAMPLENORMAL SampleNormalStochasticTriplanarProjection
          #define TEXARGS TEXTURE2D_ARGS3
        #elif _DETAILSTOCHASTIC
          #define SAMPLEBARY SampleTexBaryStochastic
          #define SAMPLE     SampleTexStochastic
          #define SAMPLENORMAL SampleNormalStochastic
          #define TEXARGS TEXTURE2D_ARGS
        #elif _DETAILTRIPLANAR
          #define SAMPLEBARY SampleTexBaryTriplanar
          #define SAMPLE     SampleTexTriplanar
          #define SAMPLENORMAL SampleNormalTriplanar
          #define TEXARGS TEXTURE2D_ARGS
        #elif _DETAILTRIPLANARPROJECTION
          #define SAMPLEBARY SampleTexBaryTriplanarProjection
          #define SAMPLE     SampleTexTriplanarProjection
          #define SAMPLENORMAL SampleNormalTriplanarProjection
          #define TEXARGS TEXTURE2D_ARGS3
        #else
          #define SAMPLEBARY SampleTexBary
          #define SAMPLE     SampleTex
          #define SAMPLENORMAL SampleNormal
          #define TEXARGS TEXTURE2D_ARGS
        #endif


          float4 dscale0 = _DetailMap_ST;
          float4 dscale1 = _DetailMap_ST;
          float4 dscale2 = _DetailMap_ST;
          #if _DETAILTRIPLANARPROJECTION
             dscale1 = _DetailMap_P1_ST;
             dscale2 = _DetailMap_P2_ST;
          #endif

         #if _DETAILTRIPLANARBARYBLEND
            Config dc = CreateConfig(d, dscale0, dscale1, dscale2, _DetailTriplanarSpace, _DetailUVSource, _DetailTriplanarContrast, d.extraV2F0.xyz, _DetailTriplanarBaryBlend * 20);
         #elif _DETAILTRIPLANARFLATBLEND
            Config dc = CreateConfig(d, dscale0, dscale1, dscale2, _DetailTriplanarSpace, _DetailUVSource, _DetailTriplanarContrast, half3(0.5, 0.5, 0.5), _DetailTriplanarBaryBlend);
         #else
            Config dc = CreateConfig(d, dscale0, dscale1, dscale2, _DetailTriplanarSpace, _DetailUVSource, _DetailTriplanarContrast);
         #endif

         #if _DETAILTEXTUREROTATION
            RotateConfig(dc, _DetailTextureRotation);
         #endif


         InitConfigDxDy(dc);

         #if _DETAILSTOCHASTIC && !_DETAILTRIPLANAR && !_DETAILTRIPLANARPROJECTION
             PrepareStochasticUVs(_DetailStochasticScale, dc.uv, dc.uvT);
             InitStochasticDxDy(dc.uvT, dc.origUV, dc.origScale);
         #elif _DETAILSTOCHASTIC && (_DETAILTRIPLANAR || _DETAILTRIPLANARPROJECTION)
             PrepareStochasticUVs(_DetailStochasticScale, dc.uvT.uv0, dc.uvX);
             PrepareStochasticUVs(_DetailStochasticScale, dc.uvT.uv1, dc.uvY);
             PrepareStochasticUVs(_DetailStochasticScale, dc.uvT.uv2, dc.uvZ);
             InitStochasticDxDy(dc.uvX, dc.origUV, dc.origScale);
             InitStochasticDxDy(dc.uvY, dc.origUV, dc.origScale1);
             InitStochasticDxDy(dc.uvZ, dc.origUV, dc.origScale2);
         #endif

         half4 detailSample = SAMPLEBARY(TEXARGS(_DetailMap, shared_linear_repeat_sampler), dc, _DetailStochasticContrast, d);
         smoothness = detailSample.z;
         #if !_AUTONORMAL
            half3 dnormal = float3(detailSample.ag * 2 - 1, 1) * detailMask * _DetailNormalStrength;
            dnormal.z = sqrt(1 - dnormal.x * dnormal.x - dnormal.y * dnormal.y);
            #if _SURFACEGRADIENT
               dnormal = ConvertNormalToGradient(d, dnormal);
            #endif
            o.Normal = LitBlendDetailNormal(o.Normal, dnormal);
         #endif
     
         o.Albedo = lerp(o.Albedo, o.Albedo * 2 * detailSample.x,  detailMask * _DetailAlbedoStrength);
         o.Smoothness = lerp(o.Smoothness, o.Smoothness * 2 * smoothness, detailMask * _DetailSmoothnessStrength);
      #endif

      #if _MICROSHADOW
      {
        o.Occlusion *= MicroShadow(d, o.Normal, o.Alpha, o.Occlusion, _MicroShadowStrength);
      }
      #endif
  
      // in case something needs height in the stack..
      o.Height = o.Alpha;

      #if _PASSDEPTHNORMALS
        // sampler stripping hack for URP depth/normals pass
        o.Normal *= saturate(o.Albedo.r + 100);
      #endif
      
   }
END_CODE


